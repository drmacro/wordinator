#     This is the Mathematical Markup Language (MathML) 3.0, an XML
#     application for describing mathematical notation and capturing
#     both its structure and content.
#
#     Copyright 1998-2008 W3C (MIT, ERCIM, Keio)
# 
#     Use and distribution of this code are permitted under the terms
#     W3C Software Notice and License
#     http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
#
#
#   Revision: $Id: mathml3-pragmatic.rnc,v 1.4 2009/01/14 13:13:58 dcarlis Exp $
#
#     Update to MathML3 and Relax NG: David Carlisle and Michael Kohlhase
#
#     This is the RelaxNG schema module for the pragmatic content part of 
#     MathML (but without the presentation in token elements).

default namespace m = "http://www.w3.org/1998/Math/MathML"


## the content of "cn" may have <sep> elements in it
sep = element sep {empty}
cn.content |= (sep|text|Glyph-alignmark)*
cn.type.vals |= "e-notation"|"rational"|
                 "complex-cartesian"|"complex-polar"|"constant" 

## allow degree in bvar
degree = element degree {MathML.Common.attrib,ContExp}
logbase = element logbase {MathML.Common.attrib,ContExp}
momentabout = element momentabout {MathML.Common.attrib,ContExp}
bvar-head |= (degree?,ci)|(ci,degree?)

## allow degree to modify <root/>
apply.content |= root_arith1_elt,degree,ContExp*
apply.content |= moment_s_data1_elt,(degree? & momentabout?),ContInPres*
apply.content |= log_transc1_elt,logbase,ContExp*

##allow apply to act as a binder
apply.content |= bind.content

domainofapplication = element domainofapplication {
                   Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp}

lowlimit = element lowlimit {
           Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp+}
uplimit = element uplimit {
          Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp+}

condition = element condition {Definition.attrib,cdbase.attrib?,ContExp}

## allow the non-strict qualifiers
qualifier |= domainofapplication|(uplimit,lowlimit?)|
             (lowlimit,uplimit?)|degree|condition

## we collect the operator elements by role
opel.constant = notAllowed
opel.binder = notAllowed
opel.application = notAllowed
opel.semantic-attribution = notAllowed
opel.attribution = notAllowed
opel.error = notAllowed

opels = opel.constant | opel.binder | opel.application | 
        opel.semantic-attribution | opel.attribution |
	opel.error
container = notAllowed

## the values of the MathML type attributes;  
MathMLType |= "real" | "complex" | "function" | "algebraic" | "integer"


## we instantiate the strict content model by structure checking
apply-binder-head = semantics-apply-binder|opel.binder
apply.content |= apply-binder-head,bvar*,qualifier?,ContExp*
semantics-apply-binder = element semantics {
                       semantics.attribs,apply-binder-head, semantics-annotation*}

apply-head |= opel.application
bind-head |= opel.binder
cerror-head |= opel.error

## allow all functions, constants, and containers
## to be content expressions on their own
ContExp |= opel.constant|opel.application|container 


# allow no body
bind.content |= bind-head,bvar*,qualifier?

# not sure what a sequence of things is supposed to map to in strict/OM
# but is definitely allowed in pragmatic
# see Content/SequencesAndSeries/product/rec-product3
math.content |= ContExp*

opel.content |= PresExp|Glyph-alignmark

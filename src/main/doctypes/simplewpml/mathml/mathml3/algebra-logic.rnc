#     This is the Mathematical Markup Language (MathML) 3.0, an XML
#     application for describing mathematical notation and capturing
#     both its structure and content.
#
#     Copyright 1998-2007 World Wide Web Consortium
#        (Massachusetts Institute of Technology, Institut National de
#         Recherche en Informatique et en Automatique, Keio University).
#         All Rights Reserved.
#
#     Permission to use, copy, modify and distribute the RelaxNG schema for MathML3
#     and its accompanying documentation for any purpose and without fee is
#     hereby granted in perpetuity, provided that the above copyright notice
#     and this paragraph appear in all copies.  The copyright holders make
#     no representation about the suitability of the Schema for any purpose.
#
#     This file contains the arity checking rules for the symbols
#     from the content dictionary algebra-logic
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id: algebra-logic.rnc,v 1.1 2007/12/11 15:38:51 dcarlis Exp $

cd.token.unary.class |= factorial.token | unary_minus.token | not.token | abs.token | conjugate.token | arg.token | real.token | imaginary.token | floor.token | ceiling.token
cd.token.binary.class |= quotient.token | divide.token | minus.token | power.token | rem.token | root.token | implies.token
cd.token.nary.class |= max.token | min.token | plus.token | times.token | gcd.token | and.token | or.token | xor.token | lcm.token
cd.binder.class |= forall.token | exists.token

# the element definitions for the token elements
quotient.content = Token.type, attribute  type  {MathMLtype}?
quotient.token = element quotient {quotient.content}
factorial.content = Token.type
factorial.token = element factorial {factorial.content}
divide.content = Token.type, attribute  type  {MathMLtype}?
divide.token = element divide {divide.content}
max.content = Token.type, attribute type {MathMLtype}?
max.token = element max {max.content}
min.content = Token.type, attribute type {MathMLtype}?
min.token = element min {min.content}
minus.content = Token.type, attribute type {MathMLtype}?
minus.token = element minus {minus.content}
unary_minus.content = Token.type, attribute type {MathMLtype}?
unary_minus.token = element minus {unary_minus.content}
#ednote(rnc:unary_minus) rename minus to unary_minus
plus.content = Token.type, attribute type {MathMLtype}?
plus.token = element plus {plus.content}
power.content = Token.type, attribute type {MathMLtype}?
power.token = element power {power.content}
rem.content = Token.type, attribute type {MathMLtype}?
rem.token = element rem {rem.content}
times.content = Token.type, attribute type {MathMLtype}?
times.token = element times {times.content}
root.content = Token.type, attribute  type  {MathMLtype}?
root.token = element root {root.content}
gcd.content = Token.type, attribute type {MathMLtype}?
gcd.token = element gcd {gcd.content}
and.content = Token.type, attribute type {MathMLtype}?
and.token = element and {and.content}
or.content = Token.type, attribute type {MathMLtype}?
or.token = element or {or.content}
xor.content = Token.type, attribute type {MathMLtype}?
xor.token = element xor {xor.content}
not.content = Token.type, attribute type {MathMLtype}?
not.token = element not {not.content}
implies.content = Token.type, attribute type {MathMLtype}?
implies.token = element implies {implies.content}
forall.content = Token.type, attribute type {MathMLtype}?
forall.token = element forall {forall.content}
exists.content = Token.type, attribute type {MathMLtype}?
exists.token = element exists {exists.content}
abs.content = Token.type, attribute type {MathMLtype}?
abs.token = element abs {abs.content}
conjugate.content = Token.type
conjugate.token = element conjugate {conjugate.content}
arg.content = Token.type, attribute type {MathMLtype}?
arg.token = element arg {arg.content}
real.content = Token.type, attribute type {MathMLtype}?
real.token = element real {real.content}
imaginary.content = Token.type, attribute type {MathMLtype}?
imaginary.token = element imaginary {imaginary.content}
lcm.content = Token.type, attribute type {MathMLtype}?
lcm.token = element lcm {lcm.content}
floor.content = Token.type, attribute type {MathMLtype}?
floor.token = element floor {floor.content}
ceiling.content = Token.type, attribute type {MathMLtype}?
ceiling.token = element ceiling {ceiling.content}

#     This is the Mathematical Markup Language (MathML) 3.0, an XML
#     application for describing mathematical notation and capturing
#     both its structure and content.
#
#     Copyright 1998-2007 World Wide Web Consortium
#        (Massachusetts Institute of Technology, Institut National de
#         Recherche en Informatique et en Automatique, Keio University).
#         All Rights Reserved.
#
#     Permission to use, copy, modify and distribute the RelaxNG schema for MathML3
#     and its accompanying documentation for any purpose and without fee is
#     hereby granted in perpetuity, provided that the above copyright notice
#     and this paragraph appear in all copies.  The copyright holders make
#     no representation about the suitability of the Schema for any purpose.
#
#     This file contains the arity checking rules for the symbols
#     from the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id: linear_algebra.rnc,v 1.1 2007/12/11 15:38:52 dcarlis Exp $

cd.token.unary.class |= determinant.token | transpose.token
cd.token.binary.class |= selector.token | vectorproduct.token | outerproduct.token
cd.token.nary.class |= vector.token | matrix.token | matrixrow.token | scalarproduct.token

# the element definitions for the token elements
vector.content = Token.type, attribute  type  {MathMLtype}?,ContExp*
vector.token = element vector {vector.content}
matrix.content = Token.type, attribute type {MathMLtype}?,ContExp*
matrix.token = element matrix {matrix.content}
matrixrow.content = Token.type,ContExp*
matrixrow.token = element matrixrow {matrixrow.content}
determinant.content = Token.type
determinant.token = element determinant {determinant.content}
transpose.content = Token.type
transpose.token = element transpose {transpose.content}
selector.content = Token.type
selector.token = element selector {selector.content}
vectorproduct.content = Token.type
vectorproduct.token = element vectorproduct {vectorproduct.content}
scalarproduct.content = Token.type
scalarproduct.token = element scalarproduct {scalarproduct.content}
outerproduct.content = Token.type
outerproduct.token = element outerproduct {outerproduct.content}